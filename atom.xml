<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dreaming</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chunminy.github.io/"/>
  <updated>2017-08-28T16:50:19.000Z</updated>
  <id>https://chunminy.github.io/</id>
  
  <author>
    <name>chunminy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>開個新類別，就3D吧</title>
    <link href="https://chunminy.github.io/2017/08/29/1/"/>
    <id>https://chunminy.github.io/2017/08/29/1/</id>
    <published>2017-08-28T16:48:52.000Z</published>
    <updated>2017-08-28T16:50:19.000Z</updated>
    
    <content type="html">&lt;p&gt;還沒想到要寫啥&lt;/p&gt;
&lt;p&gt;大概就是放些做的作品吧？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;還沒想到要寫啥&lt;/p&gt;
&lt;p&gt;大概就是放些做的作品吧？&lt;/p&gt;

    
    </summary>
    
      <category term="3D" scheme="https://chunminy.github.io/categories/3D/"/>
    
    
  </entry>
  
  <entry>
    <title>一言難盡的一年</title>
    <link href="https://chunminy.github.io/2017/08/29/0/"/>
    <id>https://chunminy.github.io/2017/08/29/0/</id>
    <published>2017-08-28T16:29:36.000Z</published>
    <updated>2017-08-28T16:49:31.000Z</updated>
    
    <content type="html">&lt;p&gt;轉眼又一年&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好久沒寫了，這一年也算是了解了些人情冷暖&lt;/p&gt;
&lt;p&gt;人啊…就是不斷的在改變&lt;/p&gt;
&lt;p&gt;變好？變壞？&lt;/p&gt;
&lt;p&gt;只能說做好自己份內的工作&lt;/p&gt;
&lt;p&gt;然後精進自己的能力&lt;/p&gt;
&lt;p&gt;剩下的就聽天由命吧&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;轉眼又一年&lt;/p&gt;
    
    </summary>
    
      <category term="Murmur" scheme="https://chunminy.github.io/categories/Murmur/"/>
    
    
  </entry>
  
  <entry>
    <title>Unity Network View</title>
    <link href="https://chunminy.github.io/2016/07/03/0/"/>
    <id>https://chunminy.github.io/2016/07/03/0/</id>
    <published>2016-07-03T14:06:07.000Z</published>
    <updated>2016-07-03T14:43:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近事情一多一忙就忘了要更新，回頭一看發現竟然半個月就過去了，怠惰真是恐怖的東西啊&lt;br&gt;&lt;br&gt;因為專案需求的關係需要Socket來處理資料傳輸，隨便找了一下Unity相關資料雖然不符合我的需求，不過還是暫時紀錄一下好了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要是使用Unity提供的NetworkView功能來進行連線，搭配使用MasterServer進行快速連線。&lt;/p&gt;
&lt;p&gt;Network.InitializeServer (connections, listenPort, !Network.HavePublicAddress ());&lt;br&gt;給予連線上限、Port、是否支援NAT三個參數來啟動伺服器。&lt;/p&gt;
&lt;p&gt;藉由Network.peerType來判定目前Network連線狀態，分別是Disconnected、Server、Client、Connecting四個狀態。&lt;/p&gt;
&lt;p&gt;Network.incomingPassword Unity 提供的連線密碼機制密碼相同才能進行連線，需要在連線啟動前就設定好。&lt;/p&gt;
&lt;h2 id=&quot;這邊是Server-啟動的Code&quot;&gt;&lt;a href=&quot;#這邊是Server-啟動的Code&quot; class=&quot;headerlink&quot; title=&quot;這邊是Server 啟動的Code&quot;&gt;&lt;/a&gt;&lt;strong&gt;這邊是Server 啟動的Code&lt;/strong&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;void ServerStartup () {
    int connections = 2;
    int listenPort = 10000;
  Network.incomingPassword = &amp;quot;TestUnityNetwork&amp;quot;;
    NetworkConnectionError error = Network.InitializeServer (connections, listenPort, !Network.HavePublicAddress ());
    if (error != NetworkConnectionError.NoError) {
        Debug.Log (&amp;quot;NetworkConnectionError:&amp;quot; + error.ToString ());
    }
    MasterServer.RegisterHost (&amp;quot;MasterServer&amp;quot;, &amp;quot;Test 01&amp;quot;, &amp;quot;description&amp;quot;);
}

void ServerQuit () {
    Network.Disconnect ();
    MasterServer.UnregisterHost ();
    message = &amp;quot;&amp;quot;;
}

void OnApplicationQuit () {
    ServerQuit ();
}

void OnGUI () {
    switch (Network.peerType)
    {
    case  NetworkPeerType.Disconnected:
        if (GUILayout.Button (&amp;quot;Create Server&amp;quot;)) {
            ServerStartup ();
        }
        break;
    case NetworkPeerType.Server:
        GUILayout.Label (&amp;quot;Server is created succesfully&amp;quot;);
        GUILayout.Label (&amp;quot;IP/port: &amp;quot; + Network.player.ipAddress + &amp;quot;/&amp;quot; + Network.player.port);
        int length = Network.connections.Length;
        GUILayout.Label (&amp;quot;There are &amp;quot; + length + &amp;quot; clients that connect to the server &amp;quot;);
        for (int i = 0; i &amp;lt; length; i++) {
            GUILayout.Label (&amp;quot;The client IP is: &amp;quot; + Network.connections[i].ipAddress);
            GUILayout.Label (&amp;quot;The client Port is &amp;quot; + Network.connections[i].port);
        }
        if (GUILayout.Button (&amp;quot;Close the connections&amp;quot;)) {
            ServerQuit ();
        }
        break;

    case NetworkPeerType.Client:
        GUILayout.Label (&amp;quot;Network Clinet&amp;quot;);
        break;

    case NetworkPeerType.Connecting:
        Debug.Log (&amp;quot;Network Connecting&amp;quot;);
        break;
    }
    GUILayout.Box (message);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;這邊是Client-啟動的Code&quot;&gt;&lt;a href=&quot;#這邊是Client-啟動的Code&quot; class=&quot;headerlink&quot; title=&quot;這邊是Client 啟動的Code&quot;&gt;&lt;/a&gt;&lt;strong&gt;這邊是Client 啟動的Code&lt;/strong&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;void Update () {
    MasterServer.RequestHostList (&amp;quot;MasterServerTest&amp;quot;);
}

void OnGUI () {
    switch (Network.peerType)
    {
    case NetworkPeerType.Disconnected:
        HostData[] hostData = MasterServer.PollHostList ();
        foreach (HostData data in hostData) {
            var name = data.gameName + &amp;quot; &amp;quot; + data.connectedPlayers + &amp;quot; / &amp;quot; + data.playerLimit;
            GUILayout.Label (name);
            GUILayout.Label (data.comment);
            foreach (string host in data.ip) {
                GUILayout.Label (&amp;quot;IP/Port: &amp;quot; + host + &amp;quot;/&amp;quot; + data.port);
                if (GUILayout.Button (&amp;quot;connect&amp;quot;)) {
                    NetworkConnectionError error = Network.Connect (host, data.port, null);
                    Debug.Log (error);
                }
            }
        }
        break;

    case NetworkPeerType.Client:
        GUILayout.Label (&amp;quot;Connection is successful&amp;quot;);
        GUILayout.Label (&amp;quot;Local IP/Port:&amp;quot; + Network.player.ipAddress + &amp;quot;/&amp;quot; + Network.player.port + &amp;quot;/&amp;quot; + Network.player.externalPort);
        int length = Network.connections.Length;
        GUILayout.Label (&amp;quot;There are &amp;quot; + length.ToString () +&amp;quot;connects&amp;quot;);
        for (int i = 0; i &amp;lt; length; i++) {
            GUILayout.Label (&amp;quot;The server IP is: &amp;quot; + Network.connections[i].ipAddress);
            GUILayout.Label (&amp;quot;The server Port is &amp;quot; + Network.connections[i].port);
        }
        if (GUILayout.Button (&amp;quot;Close the connections&amp;quot;)) {
            Network.Disconnect ();
            message = &amp;quot;&amp;quot;;
        }
        break;

    case NetworkPeerType.Connecting:
        GUILayout.Label (&amp;quot;Connecting......&amp;quot;);
        break;

    default:
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;最近事情一多一忙就忘了要更新，回頭一看發現竟然半個月就過去了，怠惰真是恐怖的東西啊&lt;/br&gt;&lt;br&gt;因為專案需求的關係需要Socket來處理資料傳輸，隨便找了一下Unity相關資料雖然不符合我的需求，不過還是暫時紀錄一下好了。&lt;br&gt;
    
    </summary>
    
      <category term="Programs" scheme="https://chunminy.github.io/categories/Programs/"/>
    
    
      <category term="Unity" scheme="https://chunminy.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity script function 執行順序</title>
    <link href="https://chunminy.github.io/2016/06/17/0/"/>
    <id>https://chunminy.github.io/2016/06/17/0/</id>
    <published>2016-06-17T03:26:04.000Z</published>
    <updated>2016-06-17T03:48:21.000Z</updated>
    
    <content type="html">&lt;p&gt;一般建立Unity Script時，Editor產生檔案後會讓該Script繼承MonoBehaviour。&lt;/p&gt;
&lt;p&gt;由於Unity是一個蠻高階的引擎系統，所以需要一個基本class掛載各種介面包山包海的讓系統可以快速串接運行，而MonoBehaviour就是這個Class。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;MonoBehaviour 本身提供很多接口讓開發者來繼承使用，所以使用MonoBehaviour最先也最重要的就是需要瞭解Unity系統在運行時，MonoBehaviour的接口呼叫順序，知道這個順序後才有辦法思考各種功能應該放在哪個function裡面才能正常運作。&lt;/p&gt;
&lt;p&gt;下圖為執行順序，圖是從&lt;a href=&quot;https://docs.unity3d.com/Manual/ExecutionOrder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unity&lt;/a&gt;網頁取來的&lt;br&gt;&lt;img src=&quot;https://docs.unity3d.com/uploads/Main/monobehaviour_flowchart.svg&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一般建立Unity Script時，Editor產生檔案後會讓該Script繼承MonoBehaviour。&lt;/p&gt;
&lt;p&gt;由於Unity是一個蠻高階的引擎系統，所以需要一個基本class掛載各種介面包山包海的讓系統可以快速串接運行，而MonoBehaviour就是這個Class。&lt;/p&gt;
    
    </summary>
    
      <category term="Programs" scheme="https://chunminy.github.io/categories/Programs/"/>
    
    
      <category term="Unity" scheme="https://chunminy.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity UI 事件處理</title>
    <link href="https://chunminy.github.io/2016/06/06/0/"/>
    <id>https://chunminy.github.io/2016/06/06/0/</id>
    <published>2016-06-06T04:09:36.000Z</published>
    <updated>2016-06-07T02:14:30.000Z</updated>
    
    <content type="html">&lt;p&gt;Unity 本身內建了EventSystem系統，通常在新增UI元件時Unity就會自動補上這個物件，但是….如果不想使用Unity內建系統或是嫌Unity功能不足的話，那就只好自己寫Script來接收訊息跟處理了。&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;但是有個重點-該Gameobject需要有UI-Component&quot;&gt;&lt;a href=&quot;#但是有個重點-該Gameobject需要有UI-Component&quot; class=&quot;headerlink&quot; title=&quot;但是有個重點!!!該Gameobject需要有UI Component&quot;&gt;&lt;/a&gt;但是有個重點!!!該Gameobject需要有UI Component&lt;/h3&gt;&lt;p&gt;這邊使用&lt;code&gt;delegate&lt;/code&gt;來串功能&lt;br&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;controler 主體&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class ButtonEventListener : 
MonoBehaviour, 
IPointerClickHandler, 
IPointerDownHandler, 
IPointerUpHandler,
IPointerEnterHandler,
IPointerExitHandler
{
    public delegate void UIProxy (GameObject gb);
    public event UIProxy OnClick;
    public event UIProxy OnDown;
    public event UIProxy OnUp;
    public event UIProxy OnEnter;
    public event UIProxy OnExit;

    public void OnPointerClick(PointerEventData eventData)
    {
        if (OnClick != null) {
            OnClick (this.gameObject);
        }
    }
    public void OnPointerDown (PointerEventData eventData)
    {
        if (OnDown != null) {
            OnDown (this.gameObject);
        }
    }
    public void OnPointerUp (PointerEventData eventData)
    {
        if (OnUp != null) {
            OnUp (this.gameObject);
        }
    }
    public void OnPointerEnter (PointerEventData eventData)
    {
        if (OnEnter != null) {
            OnEnter (this.gameObject);
        }
    }
    public void OnPointerExit (PointerEventData eventData)
    {
        if (OnExit != null) {
            OnExit (this.gameObject);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UI user&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class TestButton : MonoBehaviour 
{
    void Start () {
        // 啟動時自動生成ButtonEventListener
        ButtonEventListener btnListener = AddComponent&amp;lt;ButtonEventListener&amp;gt;();

        // function 串接
        btnListener.OnDown += delegate (GameObject gb) {
            Debug.Log(&amp;quot;Button onDown&amp;quot;);
        };
        btnListener.OnUp += delegate (GameObject gb) {
            Debug.Log(&amp;quot;Button onUp&amp;quot;);
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;del&gt;接著把生成的UI元件Image或是button原生的Script關閉或刪除，再&lt;/del&gt; (這個方式需要原生的UI元件內的Raycast Target才會觸發，所以不能移除或關閉…)補上TestButton這個Component就可以正常運作了，以上&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Unity 本身內建了EventSystem系統，通常在新增UI元件時Unity就會自動補上這個物件，但是….如果不想使用Unity內建系統或是嫌Unity功能不足的話，那就只好自己寫Script來接收訊息跟處理了。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&quot;但是有個重點-該Gameobject需要有UI-Component&quot;&gt;&lt;a href=&quot;#但是有個重點-該Gameobject需要有UI-Component&quot; class=&quot;headerlink&quot; title=&quot;但是有個重點!!!該Gameobject需要有UI Component&quot;&gt;&lt;/a&gt;但是有個重點!!!該Gameobject需要有UI Component&lt;/h3&gt;&lt;p&gt;這邊使用&lt;code&gt;delegate&lt;/code&gt;來串功能&lt;/br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programs" scheme="https://chunminy.github.io/categories/Programs/"/>
    
    
      <category term="Unity" scheme="https://chunminy.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>串流系統基本款</title>
    <link href="https://chunminy.github.io/2016/06/01/0/"/>
    <id>https://chunminy.github.io/2016/06/01/0/</id>
    <published>2016-06-01T02:32:59.000Z</published>
    <updated>2016-06-01T15:57:04.000Z</updated>
    
    <content type="html">&lt;p&gt;身為一個TA有事沒事總是喜歡找一些美術相關的資訊，前陣子看到幾個不錯的Unity工具，而其中這個&lt;a href=&quot;https://www.assetstore.unity3d.com/en/#!/content/56762&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MapMagic&lt;/a&gt;完全就是我的菜啊，對於這種拖拉點點就可以完成的編輯系統&lt;del&gt;一直是我心中的夢想&lt;/del&gt;，礙於現實面一直沒有時間實作這個系統出來，在看完MapMagic介紹影片之後覺得以後這種系統應該會變成基本中的基本，所以就花了點時間來構思系統架構順便驗證一下對於Unity的EditorWindow熟悉度，目前完成了幾個基本功能，剩下就是再稍微OO化方便繼承更多功能出來吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/HJqE3_4ex_8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;





</content>
    
    <summary type="html">
    
      &lt;p&gt;身為一個TA有事沒事總是喜歡找一些美術相關的資訊，前陣子看到幾個不錯的Unity工具，而其中這個&lt;a href=&quot;https://www.assetstore.unity3d.com/en/#!/content/56762&quot;&gt;MapMagic&lt;/a&gt;完全就是我的菜啊，對於這種拖拉點點就可以完成的編輯系統&lt;del&gt;一直是我心中的夢想&lt;/del&gt;，礙於現實面一直沒有時間實作這個系統出來，在看完MapMagic介紹影片之後覺得以後這種系統應該會變成基本中的基本，所以就花了點時間來構思系統架構順便驗證一下對於Unity的EditorWindow熟悉度，目前完成了幾個基本功能，剩下就是再稍微OO化方便繼承更多功能出來吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Programs" scheme="https://chunminy.github.io/categories/Programs/"/>
    
      <category term="Demo" scheme="https://chunminy.github.io/categories/Programs/Demo/"/>
    
    
      <category term="Unity" scheme="https://chunminy.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity Rect</title>
    <link href="https://chunminy.github.io/2016/05/31/0/"/>
    <id>https://chunminy.github.io/2016/05/31/0/</id>
    <published>2016-05-31T15:02:14.000Z</published>
    <updated>2016-06-01T00:30:55.000Z</updated>
    
    <content type="html">&lt;p&gt;最近想了一個玩具正在撰寫中，稍微使用到介面概念、座標轉換之類的很煩就是了，途中一直使用到Rect索性就把Rect相關的API看一遍，然後記錄一下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跟其他API的Rect差不多主要成員是left,right,top,bottom分別代表左右上下四個參數，但是這四個參數原則上是被封裝保護起來的，Unity有這幾種操作模式來改變參數，不太建議在一個操作中混合使用(&lt;del&gt;除非邏輯概念很好&lt;/del&gt;)。&lt;br&gt;&lt;br&gt;&lt;strong&gt;需要特別注意的是Y軸在UI系統中通常yMin代表top、yMax代表bottom，簡單說就是由上往下計算。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;1： xMin,yMin,xMax,yMax &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;改變 xMin 時會修改 left;
改變 xMax 時會修改 right;
改變 yMin 時會修改 bottom;
改變 yMax 時會修改 top;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2： x,y,width,height &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;改變 x 時會修改 left;
改變 y 時會修改 bottom
改變 width 時則以 left 為基礎去調整 right
改變 height 時則以 bottom 為基礎去調整 top
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3： position &amp;amp; size &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;修改 position 時會調整 x &amp;amp; y
修改 size 時會調整 width &amp;amp; height
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt; P.S.包了這麼多層其實有點煩，尤其Rect是會很頻繁使用的class &lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;接著來說明一下幾個比較常用的Function&quot;&gt;&lt;a href=&quot;#接著來說明一下幾個比較常用的Function&quot; class=&quot;headerlink&quot; title=&quot;接著來說明一下幾個比較常用的Function&quot;&gt;&lt;/a&gt;接著來說明一下幾個比較常用的Function&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Rect.center
回傳一個Vector2，分別代表著X軸跟Y軸的中心點。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rect.Contains
public bool Contains(Vector2 point);
public bool Contains(Vector3 point);
public bool Contains(Vector3 point, bool allowInverse);
判定Vector是否在Rect的範圍裡
allowInverse == true
代表當Rect的left大於right或是bottom大於top時
(就是顛倒過來的矩形，你是沒辦法控制使用者的)
不管呈現怎樣的矩形，都可以判定Vector是否在這個矩形裡面。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rect.Overlaps
public bool Overlaps(Rect other);
public bool Overlaps(Rect other, bool allowInverse);
判定兩個Rect是否交互重疊
allowInverse 就不重複解釋了，跟Contains一樣
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;Rect-PointToNormalized-amp-Rect-NormalizedToPoint&quot;&gt;&lt;a href=&quot;#Rect-PointToNormalized-amp-Rect-NormalizedToPoint&quot; class=&quot;headerlink&quot; title=&quot;Rect.PointToNormalized &amp;amp; Rect.NormalizedToPoint&quot;&gt;&lt;/a&gt;Rect.PointToNormalized &amp;amp; Rect.NormalizedToPoint&lt;/h1&gt;&lt;p&gt;這兩個Function是很微妙的東西，會寫這篇主要也是為了這兩個Function&lt;br&gt;&lt;br&gt;(&lt;del&gt;很少相關資訊害我在那邊研究了半個小時&lt;/del&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rect.PointToNormalized
public static Vector2 PointToNormalized(Rect rectangle, Vector2 point);
回傳一個Vector 數值 0 ~ 1，代表point在Rect中的內差值
如果Point在Rect之外，則數值會卡在0或1 (看是大於還是小於)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rect.NormalizedToPoint
public static Vector2 NormalizedToPoint(Rect rectangle, Vector2 normalizedRectCoordinates);
給予一個Rect跟數值0 ~ 1之間的Vector
回傳一個以Vector為內差值參考的座標點
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個東西可以用在蠻多地方的，雖然一般都是自己撰寫相關的轉換式。&lt;br&gt;例如：&lt;br&gt;&lt;br&gt;利用 Rect.PointToNormalized 給予世界範圍跟角色座標來取得相關的內差值。&lt;br&gt;&lt;br&gt;再利用 Rect.NormalizedToPoint 來處理內差跟世界地圖就可以推算出角色在地圖上的點&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;說得複雜一點就是用來轉換兩個不同基本單位的座標轉換拉&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;補一段驗證用的Unity-Code&quot;&gt;&lt;a href=&quot;#補一段驗證用的Unity-Code&quot; class=&quot;headerlink&quot; title=&quot;補一段驗證用的Unity Code&quot;&gt;&lt;/a&gt;補一段驗證用的Unity Code&lt;/h1&gt;&lt;p&gt;產生一個Empty GameObject之後把這個Script丟進去運行遊戲後，就可以在Inspector裡面調整觀察拉。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;

public class RectTest : MonoBehaviour {

    public Rect rect = new Rect (0,0,100,100);

    public Vector2 rectCenter;
    public float width;
    public float height;
    public Vector2 position;
    public Vector2 size;
    public Vector2 min;
    public Vector2 max;
    public float xMin;
    public float yMin;
    public float xMax;
    public float yMax;
    public float left;
    public float right;
    public float top;
    public float bottom;

    void Update () {
        rectCenter = rect.center;
        width = rect.width;
        height = rect.height;
        position = rect.position;
        size = rect.size;
        max = rect.max;
        min = rect.min;
        xMin = rect.xMin;
        yMin = rect.yMin;
        xMax = rect.xMax;
        yMax = rect.yMax;
        left = rect.left;
        right = rect.right;
        top = rect.top;
        bottom = rect.bottom;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;最近想了一個玩具正在撰寫中，稍微使用到介面概念、座標轉換之類的很煩就是了，途中一直使用到Rect索性就把Rect相關的API看一遍，然後記錄一下。&lt;br&gt;
    
    </summary>
    
      <category term="Programs" scheme="https://chunminy.github.io/categories/Programs/"/>
    
      <category term="Notes" scheme="https://chunminy.github.io/categories/Programs/Notes/"/>
    
    
      <category term="Unity" scheme="https://chunminy.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>一個晚上就可以做完的project part 2</title>
    <link href="https://chunminy.github.io/2016/05/28/2016-05-28/"/>
    <id>https://chunminy.github.io/2016/05/28/2016-05-28/</id>
    <published>2016-05-28T14:07:10.000Z</published>
    <updated>2016-07-03T14:49:29.000Z</updated>
    
    <content type="html">&lt;p&gt;雖然想說一個晚上就可以做完的Project&lt;br&gt;&lt;br&gt;不過這個花了多點時間，差不多是一個半的晚上吧。&lt;br&gt;&lt;br&gt;機制還缺很多沒補完…不過就先這樣吧。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;a href=&quot;https://itunes.apple.com/tw/app/shi-kong-zhi-men/id1071795421?amp%3Bct=GNN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;向時空之門致敬&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/oHVv4YG3GS0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;雖然想說一個晚上就可以做完的Project&lt;/br&gt;&lt;br&gt;不過這個花了多點時間，差不多是一個半的晚上吧。&lt;/br&gt;&lt;br&gt;機制還缺很多沒補完…不過就先這樣吧。&lt;br&gt;
    
    </summary>
    
      <category term="Programs" scheme="https://chunminy.github.io/categories/Programs/"/>
    
      <category term="Demo" scheme="https://chunminy.github.io/categories/Programs/Demo/"/>
    
    
      <category term="Unity" scheme="https://chunminy.github.io/tags/Unity/"/>
    
      <category term="Game" scheme="https://chunminy.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 生成檔案附帶日期</title>
    <link href="https://chunminy.github.io/2016/05/28/1/"/>
    <id>https://chunminy.github.io/2016/05/28/1/</id>
    <published>2016-05-28T07:25:16.000Z</published>
    <updated>2016-07-03T14:49:29.000Z</updated>
    
    <content type="html">&lt;p&gt;使用Hexo 建立新文章時，只需要下指令&lt;code&gt;hexo n [title]&lt;/code&gt;就會自動生成md檔&lt;br&gt;若是希望檔名可以附帶日期以便整理，可以修改&lt;code&gt;_config.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Writing
new_post_name: :year-:month-:day.md # File name of new posts
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;參數&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:title&lt;/td&gt;
&lt;td&gt;標題&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:year&lt;/td&gt;
&lt;td&gt;年份&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:month&lt;/td&gt;
&lt;td&gt;月份&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:day&lt;/td&gt;
&lt;td&gt;日期&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如此一來自動產生的檔案就會變成2016-05-28.md&lt;br&gt;&lt;br&gt;附帶一提，若是有相同名稱的檔案則會自動補上count&lt;br&gt;&lt;br&gt;例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2016-05-28.md
2016-05-28-1.md
2016-05-28-2.md
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;使用Hexo 建立新文章時，只需要下指令&lt;code&gt;hexo n [title]&lt;/code&gt;就會自動生成md檔&lt;br&gt;若是希望檔名可以附帶日期以便整理，可以修改&lt;code&gt;_config.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Writing
new_po
    
    </summary>
    
      <category term="Tool" scheme="https://chunminy.github.io/categories/Tool/"/>
    
    
      <category term="Hexo" scheme="https://chunminy.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>sublime text 移除空白</title>
    <link href="https://chunminy.github.io/2016/05/28/00/"/>
    <id>https://chunminy.github.io/2016/05/28/00/</id>
    <published>2016-05-28T04:04:50.000Z</published>
    <updated>2016-07-03T14:49:29.000Z</updated>
    
    <content type="html">&lt;p&gt;為了避免下意識多按的空白鍵造成程式碼夾帶多餘的空白，翻找了一下sublime text的設定&lt;br&gt;只需要在 &lt;code&gt;Preferences-&amp;gt;Settings-User&lt;/code&gt; 調整參數就可以了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;: true,
&amp;quot;draw_white_space&amp;quot;: &amp;quot;all&amp;quot;,
&amp;quot;translate_tabs_to_spaces&amp;quot;: true,
&amp;quot;tab_size&amp;quot;: 4,
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##trim_trailing_white_space_on_save&lt;br&gt;在存檔時會自動刪除每一行後面多餘的空白&lt;/p&gt;
&lt;p&gt;##draw_white_space&lt;br&gt;會直接顯示出空白或是Tab，這樣就可以分辨到底哪邊是空白哪邊是Tab了&lt;/p&gt;
&lt;p&gt;##translate_tabs_to_spaces&lt;br&gt;按Tab時自動轉成空白鍵&lt;/p&gt;
&lt;p&gt;##tab_size&lt;br&gt;每次案tab代表幾個空白&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;為了避免下意識多按的空白鍵造成程式碼夾帶多餘的空白，翻找了一下sublime text的設定&lt;/br&gt;只需要在 &lt;code&gt;Preferences-&amp;gt;Settings-User&lt;/code&gt; 調整參數就可以了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;: true,
&amp;quot;draw_white_space&amp;quot;: &amp;quot;all&amp;quot;,
&amp;quot;translate_tabs_to_spaces&amp;quot;: true,
&amp;quot;tab_size&amp;quot;: 4,
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://chunminy.github.io/categories/Tool/"/>
    
    
      <category term="SublimeText" scheme="https://chunminy.github.io/tags/SublimeText/"/>
    
  </entry>
  
  <entry>
    <title>砍掉重來</title>
    <link href="https://chunminy.github.io/2016/05/24/00/"/>
    <id>https://chunminy.github.io/2016/05/24/00/</id>
    <published>2016-05-24T07:31:06.000Z</published>
    <updated>2016-07-03T14:49:29.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;聽說最近流行一個晚上就可以做完的project&quot;&gt;&lt;a href=&quot;#聽說最近流行一個晚上就可以做完的project&quot; class=&quot;headerlink&quot; title=&quot;聽說最近流行一個晚上就可以做完的project&quot;&gt;&lt;/a&gt;聽說最近流行一個晚上就可以做完的project&lt;/h1&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;早些年在玩Minecraft時就簡單寫了一套Minecraft基本系統玩玩，最近玩了PS4上的&lt;a href=&quot;http://www.dragonquest.jp/builders/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DBQ&lt;/a&gt;之後心癢難耐，就把之前的系統拿出來整理一下，不過素材都是公司資產所以就不方便拿來測試。&lt;/p&gt;
&lt;p&gt;基於最近回去複習了Unity，而最快的方式就是寫個小專案來恢復記憶，所以乾脆就用Unity搭配之前寫的小系統，在稍微串接一下角色移動、UI事件、物理碰撞、攝影機追蹤這些功能，簡略地寫了一個小小的Demo來玩玩。&lt;/p&gt;
&lt;p&gt;手機上跑起來的效果大概就這樣吧&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-q6qENlF0y4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;PS:角色模型跟動作是使用&lt;a href=&quot;https://www.assetstore.unity3d.com/en/#!/content/40756&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Survival Shooter&lt;/a&gt;提供的美術資源，不得不說Unity在某些層面上真的是很方便。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;聽說最近流行一個晚上就可以做完的project&quot;&gt;&lt;a href=&quot;#聽說最近流行一個晚上就可以做完的project&quot; class=&quot;headerlink&quot; title=&quot;聽說最近流行一個晚上就可以做完的project&quot;&gt;&lt;/a&gt;聽說最近流行一個晚上就可以做完的project&lt;/h1&gt;
    
    </summary>
    
      <category term="Programs" scheme="https://chunminy.github.io/categories/Programs/"/>
    
      <category term="Demo" scheme="https://chunminy.github.io/categories/Programs/Demo/"/>
    
    
      <category term="Unity" scheme="https://chunminy.github.io/tags/Unity/"/>
    
      <category term="Game" scheme="https://chunminy.github.io/tags/Game/"/>
    
  </entry>
  
</feed>
